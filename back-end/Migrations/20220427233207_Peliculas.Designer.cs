// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using back_end.Entidades;

namespace back_end.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220427233207_Peliculas")]
    partial class Peliculas
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("back_end.Entidades.Actores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Biografia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Foto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Actores");
                });

            modelBuilder.Entity("back_end.Entidades.Cines", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(75)
                        .HasColumnType("nvarchar(75)");

                    b.Property<Point>("Ubicacion")
                        .HasColumnType("geography");

                    b.HasKey("Id");

                    b.ToTable("Cines");
                });

            modelBuilder.Entity("back_end.Entidades.Generos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Generos");
                });

            modelBuilder.Entity("back_end.Entidades.Peliculas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("EnCines")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaLanzamineto")
                        .HasColumnType("datetime2");

                    b.Property<string>("Poster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resumen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Trailer")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Peliculas");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasActores", b =>
                {
                    b.Property<int>("ActorId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int?>("ActoresId")
                        .HasColumnType("int");

                    b.Property<int>("Orden")
                        .HasColumnType("int");

                    b.Property<int?>("PeliculasId")
                        .HasColumnType("int");

                    b.Property<string>("Personaje")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ActorId", "PeliculaId");

                    b.HasIndex("ActoresId");

                    b.HasIndex("PeliculasId");

                    b.ToTable("PeliculasActores");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasCines", b =>
                {
                    b.Property<int>("CineId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int?>("CinesId")
                        .HasColumnType("int");

                    b.Property<int?>("PeliculasId")
                        .HasColumnType("int");

                    b.HasKey("CineId", "PeliculaId");

                    b.HasIndex("CinesId");

                    b.HasIndex("PeliculasId");

                    b.ToTable("PeliculasCines");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasGeneros", b =>
                {
                    b.Property<int>("GeneroId")
                        .HasColumnType("int");

                    b.Property<int>("PeliculaId")
                        .HasColumnType("int");

                    b.Property<int?>("GenerosId")
                        .HasColumnType("int");

                    b.Property<int?>("PeliculasId")
                        .HasColumnType("int");

                    b.HasKey("GeneroId", "PeliculaId");

                    b.HasIndex("GenerosId");

                    b.HasIndex("PeliculasId");

                    b.ToTable("PeliculasGeneros");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasActores", b =>
                {
                    b.HasOne("back_end.Entidades.Actores", "Actores")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("ActoresId");

                    b.HasOne("back_end.Entidades.Peliculas", "Peliculas")
                        .WithMany("PeliculasActores")
                        .HasForeignKey("PeliculasId");

                    b.Navigation("Actores");

                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasCines", b =>
                {
                    b.HasOne("back_end.Entidades.Cines", "Cines")
                        .WithMany("PeliculasCines")
                        .HasForeignKey("CinesId");

                    b.HasOne("back_end.Entidades.Peliculas", "Peliculas")
                        .WithMany("PeliculasCines")
                        .HasForeignKey("PeliculasId");

                    b.Navigation("Cines");

                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("back_end.Entidades.PeliculasGeneros", b =>
                {
                    b.HasOne("back_end.Entidades.Generos", "Generos")
                        .WithMany("PeliculasGeneros")
                        .HasForeignKey("GenerosId");

                    b.HasOne("back_end.Entidades.Peliculas", "Peliculas")
                        .WithMany("PeliculasGeneros")
                        .HasForeignKey("PeliculasId");

                    b.Navigation("Generos");

                    b.Navigation("Peliculas");
                });

            modelBuilder.Entity("back_end.Entidades.Actores", b =>
                {
                    b.Navigation("PeliculasActores");
                });

            modelBuilder.Entity("back_end.Entidades.Cines", b =>
                {
                    b.Navigation("PeliculasCines");
                });

            modelBuilder.Entity("back_end.Entidades.Generos", b =>
                {
                    b.Navigation("PeliculasGeneros");
                });

            modelBuilder.Entity("back_end.Entidades.Peliculas", b =>
                {
                    b.Navigation("PeliculasActores");

                    b.Navigation("PeliculasCines");

                    b.Navigation("PeliculasGeneros");
                });
#pragma warning restore 612, 618
        }
    }
}
